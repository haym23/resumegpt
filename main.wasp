app resumegpt {
  wasp: {
    version: "^0.9.0"
  },
  title: "ResumeGPT",
  // Auth out of the box! https://wasp-lang.dev/docs/language/features#authentication--authorization
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      google: {},
    },
    onAuthFailedRedirectTo: "/",
  },
  db: {
    system: PostgreSQL
  },
  client: {
    rootComponent: import App from "@client/App",
  },
  server: {
    // this imports a custom server endpoint for the location-based Stripe link
    setupFn: import getLocation from "@server/getLocation.js"
  },
  dependencies: [
    ("node-fetch", "3.3.0"),
    ("@chakra-ui/react", "1.8.8"),
    ("react-icons", "4.8.0"),
    ("@emotion/react", "11.10.6"),
    ("@emotion/styled", "11.10.6"),
    ("framer-motion", "6.5.1"),
    ("react-hook-form", "7.43.1"),
    ("pdfjs-dist", "3.3.122"),
    ("@types/pdfjs-dist", "2.10.378"),
    ("react-query", "^3.39.2"),
    ("axios", "^0.27.2"),
    ("chatgpt", "^5.0.10"),
    ("chatgpt-prompts", "^2.0.1"),
    ("eslint", "~7.32.0")
  ],
}

/* ðŸ’½ Wasp defines DB entities via Prisma Database Models: 
 * https://wasp-lang.dev/docs/language/features#entity
 */

entity User {=psl
  id            Int     @id @default(autoincrement())
  username      String  @unique
  password      String
  firstName     String
  lastName      String
  address       String
  phone         Int?
  emailAddress  String
  // resumes       Resume[]
  externalAuthAssociations SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          String    @id @default(uuid())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

entity Resume {=psl
  id            String     @id @default(uuid())
  // user          User?      @relation(fields: [userId], references: [id])
  // userId        Int?
  firstName     String
  lastName      String
  address       String
  phone         Int?
  emailAddress  String
  objective     String?
  skills        String[]
  jobs          Job[]
  schools       School[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
psl=}

entity School {=psl
  id              String        @id @default(uuid())
  name            String
  startYear       Int?
  endYear         Int?
  gpa             Float?
  degree          String
  major           String?
  notes           String?
  accomplishments String[]
  resume          Resume        @relation(fields: [resumeId], references: [id])
  resumeId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
psl=}

entity Job {=psl
  id                String        @id @default(uuid())
  title             String
  company           String
  location          String
  responsibilities  String[]
  resume            Resume        @relation(fields: [resumeId], references: [id])
  resumeId          String
  startYear         Int?
  endYear           Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
psl=}

/* ðŸ“¡ These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/language/features#route
 */

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/pages/MainPage"
}

route ResumePage { path: "/resume/:id", to: ResumePage }
page ResumePage {
  component: import { ResumePage } from "@client/pages/ResumePage"
}

// route LoginRoute { path: "/login", to: LoginPage }
// page LoginPage {
//   component: import Login from "@client/LoginPage"
// }

// route JobsRoute { path: "/jobs", to: JobsPage }
// page JobsPage {
//   component: import Jobs from "@client/JobsPage"
// }

// route ProfileRoute { path: "/profile", to: ProfilePage }
// page ProfilePage {
//   component: import Profile from "@client/ProfilePage"
// }

/* â›‘ These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/language/features#queries-and-actions-aka-operations
 */

action generateResume {
  fn: import { generateResume } from "@server/actions.js",
  entities: [Resume]
}

// action createJob {
//   fn: import { createJob } from "@server/actions.js",
//   entities: [Job]
// }

// action updateJob {
//   fn: import { updateJob } from "@server/actions.js",
//   entities: [Job]
// }

action updateResume {
  fn: import { updateResume } from "@server/actions.js",
  entities: [Resume]
}

query getJobs {
  fn: import { getJobs } from "@server/queries.js",
  entities: [Job]
}

query getSchools {
  fn: import { getSchools } from "@server/queries.js",
  entities: [School]
}

// query getJob {
//   fn: import { getJob } from "@server/queries.js",
//   entities: [Job]
// }

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

query getResume {
  fn: import { getResume } from "@server/queries.js",
  entities: [Resume]
}
